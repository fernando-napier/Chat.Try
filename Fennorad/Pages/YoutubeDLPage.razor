@page "/youtube"
@using System.Diagnostics
@using System.Text
@using Blazor.DownloadFileFast.Interfaces
@using System.Text.RegularExpressions
@using Blazorise
@using Fennorad.Models
@using System.Runtime.InteropServices;
@using YoutubeDLSharp
@using YoutubeDLSharp.Options
@using Google.Apis.Services
@using Google.Apis.YouTube.v3
@inject IJSRuntime JsRuntime
@inject YouTubeService YoutubeService


<div class="container">
    <div class="row center-stuff">
        <div class="col-12 col-md-10">
            <h2>YoutubeDL</h2>
            <p>This is an experimental page where users are allowed to search, watch, and even download youtube videos.</p>
            <hr />
        </div>
    </div>
    <div class="row center-stuff">
        <div class="col-12 col-md-8" style="margin-bottom: 5px;">
            <input disabled=@IsDownloadActive @bind=SearchQuery type="text" style="width: 100%;" placeholder="input search term">  
        </div>
        <div class="col-3 offset-9 col-md-1 offset-md-0" style="margin-bottom: 25px;">
            <button class="float-right" disabled=@IsDownloadActive @onclick="SearchForVideos">Search</button>
        </div>
    </div>

@if (Videos.Any())
{
        var count = Videos.Count;
        <div class="row center-stuff" style="margin-bottom: 25px;">
            <div id="myCarousel" class="carousel slide col-md-10">
                <Carousel @bind-SelectedSlide=@ChosenVideoId Autoplay="false" AutoRepeat="false">
                    @for (int i = 0; i < count; i++)
                    {
                        var video = Videos.ElementAt(i);
                        <CarouselSlide Name=@i.ToString()>
                            <div class="embed-container">
                                <iframe id=@video.VideoId src="https://www.youtube.com/embed/@video.VideoId?&enablecastapi=1" allowfullscreen></iframe>
                            </div>
                        </CarouselSlide>
                    }
                </Carousel>
                <select disabled=@(IsDownloadActive) id="downloadOptions" name="downloadOptions" @onchange=DownloadStuff class="form-select" aria-label="Default select example">
                    <option selected>Donwload Options</option>
                    <option value="video">Download Video</option>
                    <option value="audio">Download Audio</option>
                </select>
            </div>
    </div>
    
}


<br />
@if (DownloadProgressList.Any())
{
    <div class="row center-stuff">
            <button class="real-center-stuff center-stuff col-4 bg-dark" style="margin-top:20px; color:yellow;" @onclick="CancelDownload">Cancel Download</button>
        <div class="col-12 col-md-9 bg-secondary progress-update">
            @for (int i = DownloadProgressList.Count - 1; i >= 0; i--)
            {
                <p>@DownloadProgressList.ElementAt(i)</p>
            }
        </div>

    </div>
}
@if (DownloadComplete && DownloadSuccess)
{
    <div class="row center-stuff">
        <div class="col-12 col-md-9 bg-success  progress-complete">
            <p>Processing is complete! Now downloading to your browser. </p>
        </div>
    </div>
}
@if (DownloadComplete && !DownloadSuccess)
{
    <div class="row center-stuff">
        <div class="col-12 col-md-9 bg-danger  progress-complete">
            <p>Processing failed! See logs for details. </p>
        </div>
    </div>
}

</div>

<style>
    a.ytp-youtube-button.ytp-button {
        display: none !important;
        visibility: hidden !important;
    }

    button.ytp-remote-button.ytp-button {
        display:inline-block !important;
        visibility: visible !important;
    }

    .carousel-control-next, .carousel-control-prev {
        height: 30px;
        position: absolute;
        top: 50%;
    }

    .float-right {
        float: right;
    }

    .real-center-stuff {
        justify-items: center;
        align-items: center;
    }

    .center-stuff {
        justify-content: space-evenly;
        align-content: space-evenly;
    }

    .container {
        justify-content: space-evenly;
        align-content: space-evenly;
    }

    .progress-complete {
        margin-top: 20px;
    }

    .progress-update {
        margin-top: 20px;
        max-height: 200px;
        overflow: auto;
        display: flex!important;
        flex-direction: column-reverse;
    }

    .embed-container {
        position: relative;
        padding-bottom: 56.25%;
        height: 0;
        overflow: hidden;
        max-width: 100%;
    }

    .embed-container iframe, .embed-container object, .embed-container embed {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
    
</style>

@code {
    [Inject]
    public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    [Inject]
    public Configuration Config { get; set; }

    private List<YoutubeVideo> Videos { get; set; } = new List<YoutubeVideo>();
    private string ChosenVideoId { get; set; } = "0";
    private bool DownloadSuccess = false;
    private bool DownloadComplete = false;
    private bool IsDownloadActive = false;
    private string SearchQuery { get; set; }
    private List<string> DownloadProgressList = new List<string>();
    private CancellationTokenSource ctSource = null;
    private bool CtSourceIsDisposed = false;
    private Regex regex = new Regex(@"^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube(-nocookie)?\.com|youtu.be))(\/(?:[\w\-]+\?v=|embed\/|v\/)?)([\w\-]+)(\S+)?$", RegexOptions.Compiled);

    private async Task DownloadStuff(ChangeEventArgs args)
    {
        if (!int.TryParse(ChosenVideoId, out var index))
        {
            return;
        }

        var video = Videos.ElementAt(index);

        if (args.Value.ToString() == "video")
        {
            await Download(video);
        }
        else if (args.Value.ToString() == "audio")
        {
            await Download(video, true);
        }
    }

    private async Task SearchForVideos()
    {
        DownloadSuccess = false;
        DownloadComplete = false;
        DownloadProgressList = new List<string>();
        Videos = new List<YoutubeVideo>();
        StateHasChanged();

        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            var searchListRequest = YoutubeService.Search.List("snippet");
            searchListRequest.Q = SearchQuery;
            searchListRequest.Type = "video";
            searchListRequest.VideoEmbeddable = SearchResource.ListRequest.VideoEmbeddableEnum.True__;
            searchListRequest.Order = SearchResource.ListRequest.OrderEnum.Relevance;
            searchListRequest.MaxResults = 5;

            var searchListResponse = await searchListRequest.ExecuteAsync();
            Videos.AddRange(searchListResponse.Items.Select(video => new YoutubeVideo
                {
                    Thumbnail = video.Snippet.Thumbnails.High.Url,
                    Title = video.Snippet.Title,
                    VideoId = video.Id.VideoId,
                }));
            StateHasChanged();
            await Task.Delay(1000);
        }

    }

    private async Task Download(YoutubeVideo video, bool mp3Flag = false)
    {
        var youtubeUrl = $"https://www.youtube.com/watch?v={video.VideoId}";
        IsDownloadActive = true;
        DownloadSuccess = false;
        DownloadComplete = false;
        CtSourceIsDisposed = false;
        DownloadProgressList = new List<string>();
        DownloadProgressList.Add(mp3Flag ? "Audio format (mp3) chosen for download." : "Video format(mp4) chosen for download.");
        DownloadProgressList.Add($"[Title] {video.Title}");
        StateHasChanged();
        var filename = mp3Flag ? $"{Guid.NewGuid()}.mp3" : $"{Guid.NewGuid()}.mp4";




        if (string.IsNullOrEmpty(youtubeUrl) || !regex.IsMatch(youtubeUrl))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Not a valid youtube url!");
            IsDownloadActive = false;
            StateHasChanged();
            return;
        }

        DownloadProgressList.Add("Setting up process...");
        StateHasChanged();

        await Task.Delay(200);
        await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");

        try
        {
            var ytdlProc = new YoutubeDLProcess();
            ytdlProc.PythonPath = Config.PythonPath;
            ytdlProc.ExecutablePath = Config.YoutubeDLPath;
            // capture the standard output and error output
            ytdlProc.OutputReceived += async (o, e) =>
            {
                if (!String.IsNullOrEmpty(e.Data))
                {
                    var data = e.Data.Replace("[download]", "[Processing]");
                    DownloadProgressList.Add(data);
                }
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };
            ytdlProc.ErrorReceived += async (o, e) =>
            {
                if (!String.IsNullOrEmpty(e.Data))
                {
                    DownloadProgressList.Add(e.Data);
                }
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };

            var options = new OptionSet()
                {
                    Output = filename,
                    MaxFilesize = "20.0m",
                };

            if (mp3Flag)
            {
                options.ExtractAudio = mp3Flag;
                options.AudioFormat = AudioConversionFormat.Mp3;
            }

            // start running
            string[] urls = new[] { youtubeUrl };
            var ct = InitializeCTSource();

            ctSource = InitializeCTSource();

            try
            {

                await ytdlProc.RunAsync(urls, options, ctSource.Token);
            }
            catch (TaskCanceledException)
            {
                var fileToDelete = $"{filename}.part";
                bool isLocked = true;
                while (isLocked)
                {
                    await Task.Delay(1000);
                    isLocked = WaitUntilFileNotLocked(fileToDelete);
                }

                File.Delete(fileToDelete);
                return;
            }

            var fileExists = File.Exists(filename);
            if (fileExists)
            {
                await BlazorDownloadFileService.DownloadFileAsync(mp3Flag ? "download.mp3" : "download.mp4", File.ReadAllBytes(filename));
                File.Delete(filename);
                DownloadSuccess = true;
            }
            else
            {
                DownloadProgressList.Add("Download file does not exist");
                DownloadSuccess = false;
            }

        }
        catch (AggregateException ex)
        {
            DownloadProgressList.Add(ex.Message);
            File.Delete(filename);
        }
        catch (Exception ex)
        {
            DownloadProgressList.Add(ex.Message);
            File.Delete(filename);
        }

        IsDownloadActive = false;
        DownloadComplete = true;
        StateHasChanged();

        await Task.Delay(200);
        await JsRuntime.InvokeVoidAsync("resetSelect");
        await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");
    }

    private void CancelDownload()
    {
        if (ctSource != null && !CtSourceIsDisposed)
        {
            ctSource.Cancel();
            ctSource.Dispose();
            CtSourceIsDisposed = true;
            IsDownloadActive = false;
            StateHasChanged();

            await Task.Delay(200);
            await JsRuntime.InvokeVoidAsync("resetSelect");
        }

    }

    private CancellationTokenSource InitializeCTSource()
    {
        ctSource = new CancellationTokenSource();
        ctSource.Token.Register(() => DownloadProgressList.Add("[FATAL] Process has been cancelled."));
        return ctSource;
    }

    private bool WaitUntilFileNotLocked(string filename)
    {
        try
        {
            //The "using" is important because FileStream implements IDisposable and
            //"using" will avoid a heap exhaustion situation when too many handles
            //are left undisposed.
            using (FileStream fileStream = File.Open(filename, FileMode.Open, FileAccess.ReadWrite, FileShare.None))
            {
                if (fileStream != null) fileStream.Close();  //This line is me being overly cautious, fileStream will never be null unless an exception occurs... and I know the "using" does it but its helpful to be explicit - especially when we encounter errors - at least for me anyway!
            }
        }
        catch (IOException ex)
        {
            //THE FUNKY MAGIC - TO SEE IF THIS FILE REALLY IS LOCKED!!!
            if (IsFileLocked(ex))
            {
                // do something, eg File.Copy or present the user with a MsgBox - I do not recommend Killing the process that is locking the file
                return true;
            }
        }

        return false;
    }

    private static bool IsFileLocked(Exception exception)
    {
        int errorCode = Marshal.GetHRForException(exception) & ((1 << 16) - 1);
        return errorCode == 32 || errorCode == 33;    }
}
