@page "/youtube"
@using System.Diagnostics
@using System.Text
@using Blazor.DownloadFileFast.Interfaces
@using System.Text.RegularExpressions
@using Blazorise
@using Fennorad.Models
@using System.Runtime.InteropServices;
@using Google.Apis.Services
@using Google.Apis.YouTube.v3
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using YoutubeExplode
@using YoutubeExplode.Videos.Streams
@inject IJSRuntime JsRuntime
@inject YouTubeService YoutubeService
@inject ProtectedSessionStorage ProtectedSessionStore


<div class="container">
    <div class="row center-stuff">
        <div class="col-12 col-md-8">
            <h2>YoutubeDL</h2>
            <p>This is an experimental page where users are allowed to search, watch, and even download youtube videos.</p>
            <hr />
        </div>
    </div>
    <div class="row center-stuff" style="margin-bottom: 25px;">
        <div class="col-12 col-md-2">
            
        </div>
        <div class="col-12 col-md-8">
            <Tabs SelectedTab="@SelectedTab" SelectedTabChanged="@OnSelectedTabChanged">
                <Items>
                    <Tab Name="search">Search and Download</Tab>
                    <Tab Name="url">Download via Url</Tab>
                </Items>
                <Content>
                    <TabPanel Name="search">
                        @if (Videos.Any())
                        {
                            var count = Videos.Count;
                            <div class="row center-stuff" style="margin-bottom: 25px;">
                                <div id="myCarousel" class="carousel slide">
                                    <Carousel @bind-SelectedSlide=@ChosenVideoId Autoplay="false" AutoRepeat="false">
                                        @for (int i = 0; i < count; i++)
                                        {
                                            var video = Videos.ElementAt(i);
                                            <CarouselSlide Name=@i.ToString()>
                                                <div class="embed-container">
                                                    <iframe id=@video.VideoId src="https://www.youtube.com/embed/@video.VideoId?&enablecastapi=1" allowfullscreen></iframe>
                                                </div>
                                            </CarouselSlide>
                                        }
                                    </Carousel>
                                    <select disabled=@(IsDownloadActive) id="downloadOptions" name="downloadOptions" @onchange=DownloadStuff class="form-select" aria-label="Default select example">
                                        <option selected>Donwload Options</option>
                                        <option value="video">Download Video</option>
                                        <option value="audio">Download Audio</option>
                                    </select>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row center-stuff">
                                <div class="row" style="margin-bottom: 5px;">
                                    <div class="embed-container">
                                        <iframe src="https://www.youtube.com/watch?v=dQw4w9WgXcQ" allowfullscreen></iframe>
                                    </div>
                                </div>
                            </div>
                        }
                        <div class="row center-stuff">
                            <div class="row col-12 col-md-8" style="margin-bottom: 5px;">
                                <input class="col-12 col-md-10" disabled=@IsDownloadActive style="height: 30px; margin-bottom: 7px;" @bind=SearchQuery type="text" placeholder="input search term">
                                <div class="col-3 offset-9 col-md-2 offset-md-0" style="margin-bottom: 25px; height: 30px; padding-right:0px!important">
                                    <button class="float-right" disabled=@IsDownloadActive @onclick="SearchForVideos">Search</button>
                                </div>
                            </div>
                        </div>

                    </TabPanel>
                    <TabPanel Name="url">
                        <div class="row" style="margin-bottom: 5px;">
                            <input  disabled=@IsDownloadActive style="height: 30px; margin-bottom: 7px;" @bind=VideoUrl type="text" placeholder="input youtube video url">
                        </div>
                        <div class="row col-12 col-md-8">
                            <select disabled=@(IsDownloadActive) id="downloadOptionsUrl" name="downloadOptionsUrl" @onchange=DownloadViaUrl class="form-select" aria-label="Default select example">
                                <option selected>Donwload Options</option>
                                <option value="video">Download Video</option>
                                <option value="audio">Download Audio</option>
                            </select>
                        </div>
                    </TabPanel>
                </Content>
            </Tabs>
        </div>
        <div class="col-12 col-md-2">
            @if (RecentSearches.Any())
            {
                <h4>Recent Searches</h4>
                @foreach (var search in RecentSearches)
                {
                    <Button style="word-wrap:break-word" class="col-md-12 col-6" Color="Color.Light" @onclick=@(_ => RecentSearchesSearch(search))>@search</Button>
                }
                <br />
            }
        </div>
    </div>

    <br />
    @if (IsDownloadActive || DownloadComplete)
    {
        <div class="row center-stuff">
            <div class="col-12 col-md-8">
                <div class="progress">
                    @if (IsDownloadActive)
                    {
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
                             aria-valuenow=@ProgressValue aria-valuemin="0" aria-valuemax="100" style=@ProgressStyle>
                            @ProgressString
                        </div>
                    }
                    @if (DownloadComplete)
                    {
                        <div class="progress-bar" role="progressbar"
                             aria-valuenow=@ProgressValue aria-valuemin="0" aria-valuemax="100" style=@ProgressStyle>
                            @ProgressString
                        </div>
                    }
                </div>
            </div>
            <div style="padding-bottom:20px;" />
        </div>
    }

</div>


<style>
    a.ytp-youtube-button.ytp-button {
        display: none !important;
        visibility: hidden !important;
    }

    button.ytp-remote-button.ytp-button {
        display:inline-block !important;
        visibility: visible !important;
    }

    .carousel-control-next, .carousel-control-prev {
        height: 30px;
        position: absolute;
        top: 50%;
    }

    .float-right {
        float: right;
    }

    .real-center-stuff {
        justify-items: center;
        align-items: center;
    }

    .center-stuff {
        justify-content: space-evenly;
        align-content: space-evenly;
    }

    .container {
        justify-content: space-evenly;
        align-content: space-evenly;
    }

    .progress-complete {
        margin-top: 20px;
    }

    .progress-update {
        margin-top: 20px;
        min-height: 100px;
        max-height: 200px;
        overflow: auto;
        display: flex!important;
        flex-direction: column-reverse;
    }

    .embed-container {
        position: relative;
        padding-bottom: 56.25%;
        height: 0;
        overflow: hidden;
        max-width: 100%;
    }

    .embed-container iframe, .embed-container object, .embed-container embed {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

</style>

@code {
    [Inject]
    public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    [Inject]
    public Configuration Config { get; set; }

    private List<YoutubeVideo> Videos { get; set; } = new List<YoutubeVideo>() { new YoutubeVideo { Title = "rick roll", VideoId = "dQw4w9WgXcQ" } };
    private string ChosenVideoId { get; set; } = "0";
    private bool DownloadComplete = false;
    private bool IsDownloadActive = false;
    private string SearchQuery { get; set; }
    private int ProgressValue { get; set; } = 0;
    private string ProgressString { get; set; }
    private string ProgressStyle { get; set; }
    private FluentSizing ProgressWidth { get; set; }
    private string VideoUrl { get; set; }
    private Regex YoutubeRegex = new Regex(@"youtu(?:\.be|be\.com)/(?:.*v(?:/|=)|(?:.*/)?)([a-zA-Z0-9-_]+)", RegexOptions.Compiled);
    private string SelectedTab = "search";
    private List<string> RecentSearches = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<List<string>>("recentsearches");
            if (result.Success)
            {
                RecentSearches = result.Value;
            }
            StateHasChanged();
        }
    }

    private Task OnSelectedTabChanged(string name)
    {
        SelectedTab = name;
        if (DownloadComplete)
        {
            DownloadComplete = false;
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task DownloadStuff(ChangeEventArgs args)
    {
        if (!int.TryParse(ChosenVideoId, out var index))
        {
            return;
        }

        var video = Videos.ElementAt(index);

        if (args.Value.ToString() == "video")
        {
            await DownloadViaExplode(video);
        }
        else if (args.Value.ToString() == "audio")
        {
            await DownloadViaExplode(video, true);
        }
    }

    private async Task RecentSearchesSearch(string search)
    {
        SearchQuery = search;
        await SearchForVideos();
    }

    private async Task SearchForVideos()
    {
        DownloadComplete = false;
        Videos = new List<YoutubeVideo>();
        StateHasChanged();
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            var search = SearchQuery;
            if (SearchQuery.Contains("youtu.be") || SearchQuery.Contains("/live/"))
            {
                var uri = new Uri(SearchQuery);
                search = uri.LocalPath;
            }

            var searchListRequest = YoutubeService.Search.List("snippet");
            searchListRequest.Q = search;
            searchListRequest.Type = "video";
            searchListRequest.VideoEmbeddable = SearchResource.ListRequest.VideoEmbeddableEnum.True__;
            searchListRequest.Order = SearchResource.ListRequest.OrderEnum.Relevance;
            searchListRequest.MaxResults = 5;

            var searchListResponse = await searchListRequest.ExecuteAsync();
            Videos.AddRange(searchListResponse.Items.Select(video => new YoutubeVideo
                {
                    Title = video.Snippet.Title,
                    VideoId = video.Id.VideoId,
                }));
            if (!RecentSearches.Any(x => x == SearchQuery))
            {
                RecentSearches.Add(SearchQuery);
            }
            await ProtectedSessionStore.SetAsync("recentsearches", RecentSearches);
            StateHasChanged();
            await Task.Delay(1);
        }

    }

    private async Task DownloadViaExplode(YoutubeVideo video, bool mp3Flag = false)
    {
        IStreamInfo streamInfo;
        var youtube = new YoutubeClient();
        var youtubeUrl = $"https://www.youtube.com/watch?v={video.VideoId}";

        IsDownloadActive = true;
        ProgressValue = 25;
        ProgressStyle = $"width:{ProgressValue}%";
        ProgressString = "Locating Video - 25%";
        StateHasChanged();

        await Task.Delay(200);
        await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");

        var streamManifest = await youtube.Videos.Streams.GetManifestAsync(youtubeUrl);
        ProgressValue = 50;
        ProgressString = "Grabbing Video Bytes - 50%";
        ProgressStyle = $"width:{ProgressValue}%";
        StateHasChanged();
        if (mp3Flag)
        {
            // ...or highest bitrate audio-only stream
            streamInfo = streamManifest.GetAudioOnlyStreams().GetWithHighestBitrate();
        }
        else
        {
            // Get highest quality muxed stream
            streamInfo = streamManifest.GetMuxedStreams().GetWithHighestVideoQuality();
        }

        var filename = $"{Guid.NewGuid()}.{streamInfo.Container}";
        var stream = await youtube.Videos.Streams.GetAsync(streamInfo);
        await youtube.Videos.Streams.DownloadAsync(streamInfo, filename);
        // DownloadProgressList.Add(mp3Flag ? $"Downloading audio..." : $"Downloading video...");
        ProgressValue = 75;
        ProgressString = "Converting Video Bytes - 75%";
        ProgressStyle = $"width:{ProgressValue}%";
        StateHasChanged();

        await BlazorDownloadFileService.DownloadFileAsync(mp3Flag ? $"{video.Title}.mp3" : $"{video.Title}.mp4", File.ReadAllBytes(filename));
        File.Delete(filename);
        // DownloadProgressList.Add("Download completed");
        ProgressValue = 100;
        ProgressString = mp3Flag ? "Audio Downloading": "Video Downloading";
        ProgressStyle = $"width:{ProgressValue}%";
        IsDownloadActive = false;
        DownloadComplete = true;
        StateHasChanged();

        await Task.Delay(200);
        await JsRuntime.InvokeVoidAsync("resetSelect");
        await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");
    }

    private async Task DownloadViaUrl(ChangeEventArgs args)
    {
        var mp3Flag = false;

        if (args.Value.ToString() == "video")
        {
            mp3Flag = false;
        }
        else if (args.Value.ToString() == "audio")
        {
            mp3Flag = true;
        }

        if (string.IsNullOrWhiteSpace(VideoUrl))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Paste a Youtube Url");
            return;
        }
        var match = YoutubeRegex.Match(VideoUrl);

        if (!match.Success)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Url is not a youtube video");
            return;
        }

        IStreamInfo streamInfo;
        var youtube = new YoutubeClient();

        IsDownloadActive = true;
        ProgressValue = 25;
        ProgressStyle = $"width:{ProgressValue}%";
        ProgressString = "Locating Video - 25%";
        StateHasChanged();

        await Task.Delay(200);
        await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");

        var streamManifest = await youtube.Videos.Streams.GetManifestAsync(VideoUrl);
        ProgressValue = 50;
        ProgressString = "Grabbing Video Bytes - 50%";
        ProgressStyle = $"width:{ProgressValue}%";
        StateHasChanged();
        if (mp3Flag)
        {
            // ...or highest bitrate audio-only stream
            streamInfo = streamManifest.GetAudioOnlyStreams().GetWithHighestBitrate();
        }
        else
        {
            // Get highest quality muxed stream
            streamInfo = streamManifest.GetMuxedStreams().GetWithHighestVideoQuality();
        }

        var filename = $"{Guid.NewGuid()}.{streamInfo.Container}";
        var stream = await youtube.Videos.Streams.GetAsync(streamInfo);
        await youtube.Videos.Streams.DownloadAsync(streamInfo, filename);

        ProgressValue = 75;
        ProgressString = "Converting Video Bytes - 75%";
        ProgressStyle = $"width:{ProgressValue}%";
        StateHasChanged();
        
        await BlazorDownloadFileService.DownloadFileAsync(mp3Flag ? $"download.mp3" : $"download.mp4", File.ReadAllBytes(filename));
        File.Delete(filename);
        ProgressValue = 100;
        ProgressString = mp3Flag ? "Audio Downloading" : "Video Downloading";
        ProgressStyle = $"width:{ProgressValue}%";
        IsDownloadActive = false;
        DownloadComplete = true;
        StateHasChanged();

        await Task.Delay(200);
        await JsRuntime.InvokeVoidAsync("resetSelectUrl");
        await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");
    }
}
