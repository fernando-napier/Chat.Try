@page "/beautify"
@using System.Diagnostics;
@using System.Text;
@using Blazor.DownloadFileFast.Interfaces;
@using System.Text.RegularExpressions;
@using Fennorad.Models;
@using YoutubeDLSharp;
@using YoutubeDLSharp.Options;
@using System;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using System.Xml;
@using System.Xml.Linq;
@inject IJSRuntime JsRuntime

<div class="container">
    <div class="row center-stuff">
        <div class="col-12 col-md-8">
            <h2>Format Beautifier</h2>
            <p>This is an experimental page where XML or JSON is passed through and beautified.</p>
            <hr />
        </div>
    </div>

    <div class="row center-stuff">
        <div class="col-12 col-md-8">
            <textarea disabled=@IsBeautifyActive @bind=PlainString type="text" class="text-area" placeholder="{}" />
        </div>
    </div>
    <div class="row center-stuff">
        <div class="col-3 col-md-3">
            <div class="custom-select" style="width:100px; margin-bottom:3px;">
                <select class="form-select fixed-height" id="format" @bind=SelectedFormat>
                    <option value="0">Format</option>
                    <option value="json">JSON</option>
                    <option value="xml">XML</option>
                </select>
                @*<button disabled=@IsBeautifyActive class="yt-float-child-element-right bg-info" style="width:100px;" @onclick="BeautifyString">Beautify</button>*@
            </div>
        </div>
        <div class="col-3 col-md-3 offset-6 offset-md-0">
            <button disabled=@IsBeautifyActive class="fixed-height bg-info float-right" style="width:100px;" @onclick="BeautifyString">Beautify</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(PrettyJson))
    {
        <div class="row center-stuff" style="margin-top:15px;">
            <div class="col-12 col-md-8">
                <textarea readonly type="text" class="text-area" value="@PrettyJson" />
                <button class="@(CopySuccess ? "bg-info": "")" @onclick="CopyContents">Copy To Clipboard</button>
            </div>
        </div>
    }

@if(!string.IsNullOrEmpty(InvalidJson))
{
    <div class="row center-stuff" style="margin-top:15px;">
        <div class="col-12 col-md-8">
            <div class="col-12 col-md-6 bg-warning">
                <p>@InvalidJson</p>
            </div>
        </div>
    </div>
}

</div>





<style>
    .float-right {
        float:right;
    }

    .center-stuff {
        justify-content: space-evenly;
        justify-items: center;
        align-content: space-evenly;
        align-items: center;
    }

    .container {
        justify-content: space-evenly;
        justify-items: center;
        align-content: space-evenly;
        align-items: center;
    }
    
    .fixed-height {
        height: 39px;
    }

    .text-area {
        resize: vertical;
        height: 300px;
        min-height: 300px;
        overflow-y: scroll;
        width:100%;
    }

    .float-parent-element {
        width: 100%;
        display: block;
    }

    .float-child-element-left {
        float: left;
        width: 50%!important;
    }

    .float-child-element-right {
        margin-left:10px;
        float: left;
        width: 35px!important;
    }


</style>

@code {
    private string PrettyJson { get; set; }
    private string InvalidJson { get; set; }
    public string PlainString { get; set; }
    public string SelectedFormat { get; set; }
    private bool IsBeautifyActive = false;
    private bool CopySuccess = false;

    private async Task CopyContents()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", PrettyJson);
        CopySuccess = true;
        StateHasChanged();
    }

    private async Task BeautifyString()
    {
        InvalidJson = null;
        PrettyJson = null;
        IsBeautifyActive = true;
        CopySuccess = false;
        StateHasChanged();

        if (string.IsNullOrEmpty(PlainString))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Enter data bruh");
            IsBeautifyActive = false;
            StateHasChanged();
            return;
        }

        if (SelectedFormat == null)
        {
            InvalidJson = "Pick a Format";

        }
        else if (SelectedFormat == "json")
        {
            ParseJsonString();
        }
        else
        {

            PrettyXml();
        }

        IsBeautifyActive = false;
        StateHasChanged();
        await Task.Delay(200);
        await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");
    }

    private void PrettyXml()
    {
        try
        {
            var stringBuilder = new StringBuilder();

            var element = XElement.Parse(PlainString);

            var settings = new XmlWriterSettings();
            settings.OmitXmlDeclaration = true;
            settings.Indent = true;
            settings.NewLineOnAttributes = true;

            using (var xmlWriter = XmlWriter.Create(stringBuilder, settings))
            {
                element.Save(xmlWriter);
            }

            PrettyJson = stringBuilder.ToString();
        }
        catch(Exception ex)
        {
            InvalidJson = ex.Message;
        }

    }

    private void ParseJsonString()
    {
        if (!IsValidJson(PlainString))
        {
            IsBeautifyActive = false;
            StateHasChanged();
            return;
        }

        try
        {
            dynamic parsedJson = JsonConvert.DeserializeObject(PlainString);
            PrettyJson = JsonConvert.SerializeObject(parsedJson, Newtonsoft.Json.Formatting.Indented);
        }
        catch (Exception ex)
        {
            InvalidJson = ex.Message;
        }
    }

    private bool IsValidJson(string Input)
    {
        Input = Input.Trim();
        if ((Input.StartsWith("{") && Input.EndsWith("}")) || //For object
        (Input.StartsWith("[") && Input.EndsWith("]"))) //For array
        {
            try
            {
                var obj = JToken.Parse(Input);
                return true;
            }
            catch (JsonReaderException jex)
            {
                //Exception in parsing json
                InvalidJson = jex.Message;
                return false;
            }
            catch (Exception ex) //some other exception
            {
                InvalidJson = ex.Message;
                return false;
            }
        }
        else
        {
            InvalidJson = "JSON must start and end with with {} or []";
            return false;
        }
    }
}