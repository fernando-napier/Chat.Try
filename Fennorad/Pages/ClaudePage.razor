@page "/claude"
@using System.Diagnostics;
@using System.Text;
@using Blazor.DownloadFileFast.Interfaces;
@using System.Text.RegularExpressions;
@using Fennorad.AnthropicClient
@using Fennorad.AnthropicClient.Models
@using Fennorad.Models;
@using System;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using System.Xml;
@using System.Xml.Linq;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject IJSRuntime JsRuntime
@inject ProtectedSessionStorage ProtectedSessionStore

<div class="container">
    <div class="row center-stuff">
        <div class="col-12 col-md-8">
            <h2>Chat with Claude</h2>
            <p>In this page you can chat with Anthropic's Claude Generative AI.</p>
            <hr />
        </div>
    </div>    
    <div class="row center-stuff">
        <div class="col-12 col-md-8">
            <div id="claude_messages" class="msg_history flex-column">

                @foreach (var message in MessageList)
                {
                    @if (message.IsFromClaude)
                    {
                        <div class="incoming_msg">
                            <div class="received_msg">
                                <div class="received_withd_msg">
                                    <p class="pre-wrap">
                                        @message.Message
                                    </p>
                                    <span class="time_date"> @message?.CreatedOn.ToString("MM/dd/yy HH:mm")</span>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="outgoing_msg">
                            <div class="sent_msg">
                                <div class="sent_withd_msg">
                                    <p>
                                        @message.Message
                                    </p>
                                    <span class="time_date"> @message?.CreatedOn.ToString("MM/dd/yy HH:mm")</span>
                                </div>
                            </div>
                        </div>
                    }
                    
                }
            </div>
            @if (IsAwaitingResponse)
            {
                <div class="loading">Loading</div>
            }
            <Field>
                <FileEdit AutoReset=false DisableProgressReport=true Changed="OnFileUpload" Filter="image/jpeg, image/png, image/gif"></FileEdit>
            </Field>
            <textarea style="width:100%;" type="text" @onkeydown="SendMessageOnKeyPress" @bind:event="oninput" @bind=NewMessage placeholder="Type a message" />
        </div>
    </div>
</div>





<style>
    .time_date {
        color: #747474;
        display: block;
        font-size: 12px;
        margin: 8px 0 0;
    }

    .sent_withd_msg p {
        background: #05728f none repeat scroll 0 0;
        border-radius: 3px;
        font-size: 14px;
        margin: 0;
        color: #fff;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .sent_msg p {
        display: inline-block;
        padding: 0 0 0 10px;
        vertical-align: top;
        width: 92%;
    }

    .sent_msg {
        float: right;
        width: 60%;
    }
    
    .outgoing_msg {
        margin: 26px 0 26px;
    }

    .received_withd_msg p {
        background: #ebebeb none repeat scroll 0 0;
        border-radius: 3px;
        color: #646464;
        font-size: 14px;
        margin: 0;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .received_msg {
        display: inline-block;
        padding: 0 0 0 10px;
        vertical-align: top;
        width: 92%;
    }

    .incoming_msg {
        margin: 26px 0 26px;
    }

    .received_withd_msg {
        width: 100%;
    }

    .float-right {
        float: right;
    }

    .center-stuff {
        justify-content: space-evenly;
        justify-items: center;
        align-content: space-evenly;
        align-items: center;
    }

    .container {
        justify-content: space-evenly;
        justify-items: center;
        align-content: space-evenly;
        align-items: center;
    }

    .fixed-height {
        height: 39px;
    }

    .text-area {
        bottom: 20px;
        height: 40px;
    }

    .float-parent-element {
        width: 100%;
        display: block;
    }

    .float-child-element-left {
        float: left;
        width: 50% !important;
    }

    .float-child-element-right {
        margin-left: 10px;
        float: left;
        width: 35px !important;
    }

    .msg_history {
        display: flex;
        overflow-y: hidden;
        margin: 0 0 40px 0;
    }

    .received_msg {
        display: inline-block;
        padding: 0 0 0 10px;
        vertical-align: top;
        width: 92%;
    }

    .pre-wrap {
        white-space: pre-wrap;
    }

    .loading {
      font-size: 15px;
      padding-bottom: 40px;
    }

    .loading:after {
      overflow: hidden;
      display: inline-block;
      vertical-align: bottom;
      -webkit-animation: ellipsis steps(4,end) 900ms infinite;      
      animation: ellipsis steps(4,end) 900ms infinite;
      content: "\2026"; /* ascii code for the ellipsis character */
      width: 0px;
    }

    @@keyframes ellipsis {
      to {
        width: 1.25em;    
      }
    }

    @@-webkit-keyframes ellipsis {
      to {
        width: 1.25em;    
      }
    }
</style>

@code {

    [Inject]
    private IHttpClientFactory HttpClientFactory { get; set; }
    [Inject]
    IAnthropicClient _client { get; set; }

    private List<ClaudeMessage> MessageList { get; set; } = new();
    private string NewMessage { get; set; }
    private bool IsAwaitingResponse { get; set; }
    private Fennorad.AnthropicClient.Models.ImageSource ImageData { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<List<ClaudeMessage>>("messages");
            if (result.Success)
            {
                MessageList = result.Value;
            }
            StateHasChanged();
        }
    }

    private async Task SendMessageOnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            IsAwaitingResponse = true;
            await Task.Delay(1);

            await SendMessage();

            IsAwaitingResponse = false;
            StateHasChanged();
            await Task.Delay(1);
            await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(NewMessage))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Add a Message");
            return;
        }

        MessageList.Add(new ClaudeMessage
        {
            CreatedOn = DateTimeOffset.Now,
            IsFromClaude = false,
            Message = NewMessage,
            Base64Image = ImageData != null ? ImageData.Data : null,
            MediaType = ImageData != null ? ImageData.MediaType : null,
        });

        NewMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(200);
        await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");

        try
        {
            var client = HttpClientFactory.CreateClient("anthropic");
            var messages = ProcessMessages();
            var request = new Fennorad.AnthropicClient.Models.AnthropicRequest
                {
                    MaxTokens = 2000,
                    Model = Fennorad.AnthropicClient.Models.ClaudeModel.Claude_3_Haiku,
                    Messages = messages,
                };

            MessageList.Add(new ClaudeMessage
                {
                    IsFromClaude = true,
                    Message = "",
                    CreatedOn = DateTimeOffset.Now,
                });
            var sb = new StringBuilder();
            var inputToken = 0;
            await foreach (var sseMessage in _client.SendMessageStreamAsync(request))
            {
                if (sseMessage.EventName == "message_start")
                {
                    inputToken = sseMessage.Data.Message.Usage.InputTokens;
                }

                if (sseMessage.EventName == "content_block_delta")
                {
                    sb.Append(sseMessage.Data.Delta.Text);
                    MessageList.Last().Message = sb.ToString();
                    StateHasChanged();
                    await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");
                    await Task.Delay(1);
                }
            }

            await ProtectedSessionStore.SetAsync("messages", MessageList);
            if (inputToken > 2000)
            {
                MessageList.RemoveAt(0);
                MessageList.RemoveAt(0);
            }

            StateHasChanged();
            await Task.Delay(200);
            await JsRuntime.InvokeVoidAsync("scrollWindowToBottom");
        } 
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnFileUpload(FileChangedEventArgs e)
    {
        var file = e.Files.First();

        using (var stream = new MemoryStream())
        {
            // Here we're telling the FileEdit where to write the upload result
            await file.WriteToStreamAsync(stream);

            // Once we reach this line it means the file is fully uploaded.
            // In this case we're going to offset to the beginning of file
            // so we can read it.
            stream.Seek(0, SeekOrigin.Begin);
            var bytes = stream.ToArray();
            var base64File = Convert.ToBase64String(bytes);
            ImageData = new Fennorad.AnthropicClient.Models.ImageSource
                {
                    Data = base64File,
                    MediaType = e.Files.First().Type,
                };
        }

        
    }

    private List<AnthropicMessage> ProcessMessages()
    {
        var messages = new List<AnthropicMessage>();
        foreach (var msg in MessageList)
        {
            if (msg.IsFromClaude)
            {
                messages.Add(new AnthropicMessage
                    {
                        Role = Role.Assistant,
                        Content = new List<Content>
                        {
                            new Content
                            {
                                Type = Fennorad.AnthropicClient.Models.Type.Text,
                                Text = msg.Message,
                            }
                        }
                    });
            }
            else
            {
                var contentList = new List<Content>();
                contentList.Add(new Content
                    {
                        Type = Fennorad.AnthropicClient.Models.Type.Text,
                        Text = msg.Message,
                    });
                if (!string.IsNullOrWhiteSpace(msg.MediaType) && !string.IsNullOrWhiteSpace(msg.Base64Image))
                {
                    contentList.Add(new Content
                    {
                        Type = Fennorad.AnthropicClient.Models.Type.Image,
                        Source = new ImageSource
                        {
                            Data = msg.Base64Image,
                            MediaType = msg.MediaType,
                        }
                    });
                }

                messages.Add(new AnthropicMessage
                    {
                        Content = contentList,
                        Role = Role.User
                    });
            }
        }

        return messages;
    }
}