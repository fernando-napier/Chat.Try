@page "/counter"
@using Fennorad.Db.Models
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Fennorad.Accessors.IChatDbAccessor _chatDbAccessor
@inject Fennorad.Accessors.IUserDbAccessor _userDbAccessor
@inject NavigationManager _navigation
@inject IJSRuntime JsRuntime

<PageTitle>Counter</PageTitle>

<h2>Counter</h2>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<AuthorizeView>
    <Authorized>
        <hr />
        <h2>Leaderboard</h2>
        <table class="table" title="Counter Leaderboard">
            <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">User</th>
              <th scope="col">Count</th>
            </tr>
          </thead>
      <tbody>
              @if (leaderboard != null)
              {
                @for(int i = 1; i < leaderboard.Count + 1; i++)
                {
                    var leader = leaderboard.ElementAt(i - 1);
                    <tr>
                        <th scope="row">@i</th>
                        <td>@leader.User.UserName</td>
                        <td>@leader.Count</td>
                    </tr>
                }
              }
      </tbody>
      </table>
    </Authorized>
    <NotAuthorized>
        <p>You can click the counter button however your count will only be saved if you login or register</p>
        <a href="#">Go Home</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int currentCount = 0;
    private Db.Models.Counter counter = new Db.Models.Counter();
    private ClaimsPrincipal user = new ClaimsPrincipal();
    private string userId = "";
    private List<Db.Models.Counter> leaderboard { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeCounterAsync();

        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                RefreshLeaderboard();
            });
        }, null, 0, 15000);
    }

    private void RefreshLeaderboard()
    {
        var refreshLeaderboard = _chatDbAccessor.GetLeaderboard();

        if (leaderboard == null)
        {
            leaderboard = refreshLeaderboard;
            StateHasChanged();
            return;
        }

        if (!LeaderboardEquality(refreshLeaderboard))
        {
            leaderboard = refreshLeaderboard;
            StateHasChanged();
        }
    }

    private bool LeaderboardEquality(List<Db.Models.Counter> refresh)
    {
        foreach(var leader in leaderboard)
        {
            var refreshValues = refresh.FirstOrDefault(x => x.UserId == leader.UserId);

            if (refreshValues == null)
            {
                return false;
            }

            if (refreshValues.Count != leader.Count)
            {
                return false;
            }
        }

        return true;
    }

    private async Task InitializeCounterAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }

        userId = _userDbAccessor.GetIdByUser(user.Identity.Name);        

        var existingCounter = _chatDbAccessor.GetCounter(userId);
        if (existingCounter == null)
        {
            var newCounter = new Db.Models.Counter
                {
                    UserId = userId,
                };
            var success = _chatDbAccessor.SaveCounter(newCounter);

            if (success)
            {
                counter = newCounter;
            }
        }
        else 
        {
            counter = existingCounter;
            currentCount = existingCounter.Count;
        }
    }

    private void IncrementCount()
    {
        try
        {
            currentCount++;
            if (!user.Identity.IsAuthenticated)
            {
                return;
            }
            counter.Count = currentCount;
            _chatDbAccessor.UpdateCounter(counter);
        }
        catch
        {
            base.StateHasChanged();
        }
        base.StateHasChanged();
    }
}
