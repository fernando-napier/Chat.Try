@page "/chat"
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Try.Models
@inject Chat.Try.Accessors.IUserDbAccessor _userDbAccessor
@inject Chat.Try.Accessors.IChatDbAccessor _chatAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using Microsoft.JSInterop
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>
        <div class="messaging">
            <div class="inbox_msg">
                <div class="inbox_people @((MobileMessageViewFlag ? "inbox_not_selected" : ""))">
                    <div class="headind_srch @((MobileMessageViewFlag ? "hidden_stuff" : ""))">
                <div class="recent_heading">
                    <h4>Recent</h4>
                </div>
                <div class="srch_bar">
                    <input type="text" class="search-bar" @bind-value="UserSearch" @bind-value:event="oninput" @onkeyup="SearchForUser" placeholder="Search for Users">
                            @if (UserSearchResults != null && UserSearchResults.Any())
                            {
                                <ul class="list-group" style="position: absolute; z-index: 100;">
                                    @foreach (var userChosen in UserSearchResults)
                                    {
                                        <li class="list-group-item" @onclick="() => CreateUserConversation(userChosen)">@userChosen</li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                    <div class="inbox_chat @((MobileMessageViewFlag ? "hidden_stuff" : ""))">
                        @if (RefreshConversations != null)
                        {
                            Conversations = RefreshConversations;
                        }
                        <ConversationPage Conversations=@Conversations UserId=@_userId @bind-SelectedConversation="SelectedConversation" @bind-MobileMessageViewFlag="MobileMessageViewFlag" @bind-RefreshConversations="RefreshConversations"/>
                    </div>
                </div>
                <div class="msgs @((MobileMessageViewFlag ? "msgs_selected" : "hidden_stuff"))">
                    @if(SelectedConversation != null && SelectedConversation.Id != 0)
                    {
                        var convo = Conversations.First(x => x.Id == SelectedConversation.Id);
                        SelectedConversation = convo;
                        MobileConvoUserString = SelectedConversation.ConversationUsers.First(x => x.UserId != _userId).User.UserName;
                        <div class="float-parent-element">
                            <div class="float-child-element-right  @((MobileMessageViewFlag ? "" : "hidden_stuff"))"><strong>@MobileConvoUserString</strong></div>
                            <button class="float-child-element-left return_to_convo @((!MobileMessageViewFlag ? "hidden_stuff" : ""))" @onclick="FlipReturnToConvo">&lt;=</button>
                        </div>
                        
                    }
                    <div class="msg_history flex-column-reverse" @ref=MessageRef>
                        @if (SelectedConversation != null && SelectedConversation.Id != 0)
                        {
                            <DisplayMessages @ref=_displayMessages Conversation=@SelectedConversation UserId=@_userId />
                        }
                    </div>

                    <div class="type_msg @((MobileMessageViewFlag ? "" : "hidden_stuff"))">
                        <div class="input_msg_write">
                            <textarea type="text" class="write_msg" @onkeyup="SendMessageOnKeyPress" @bind=NewMessage placeholder="Type a message" />
                            <button class="msg_send_btn" type="button" @onclick="@(() => SendMessage())">=></button>
                        </div>
                    </div>
                </div>
        </div>
        </div>
    </Authorized>

    <NotAuthorized>
        <div class="row center-stuff">
            <div class="col-12 col-md-8">
                <h1>Hello, unauthenticated user!</h1>
                <p>In order to authenticate and interact with others <a href="Identity/Account/Login">Login</a> or <a href="Identity/Account/Register">Register</a></p>
                <a href="#">Go Home</a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>



@code{
    private List<string> UserSearchResults { get; set; }
    private List<Conversations> Conversations = new();
    private Conversations SelectedConversation { get; set; }
    private List<Conversations> RefreshConversations { get; set; }
    private string _username;
    private string _userId;
    private string UserSearch { get; set; }
    private string ResultUserChosen;
    private string NewMessage;
    private bool isUserReadonly = false;
    private ClaimsPrincipal user = new ClaimsPrincipal();
    private DisplayMessages _displayMessages { get; set; }
    ElementReference MessageRef;
    private bool ScrollUpdatedFlag = false;
    private int ScrollCounter = 0;
    private bool ReturnToConvos = false;
    private bool MobileMessageViewFlag { get; set; } = false;
    private string MobileConvoUserString { get; set; } = string.Empty;
    private Timer Timer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }

        _username = user.Identity.Name;
        _userId = _userDbAccessor.GetIdByUser(_username);

        Conversations = _chatAccessor.GetUserConversations(_userId);
        StateHasChanged();
    }

    private void FlipReturnToConvo()
    {
        MobileMessageViewFlag = false;
        SelectedConversation = new Conversations();
    }

    private async Task CreateUserConversation(string userChosen)
    {
        if (!string.IsNullOrWhiteSpace(userChosen))
        {
            var anotherUser = _userDbAccessor.GetIdByUser(userChosen);
            if (string.IsNullOrWhiteSpace(anotherUser))
            {
                await JsRuntime.InvokeVoidAsync("alert", "user not found");
                return;
            }

            if (_chatAccessor.ConversationExists(_userId, anotherUser))
            {
                return;
            }

            var conversation = new Conversations()
                {
                    CreatedOn = DateTimeOffset.Now,
                    ConversationUsers = new List<ConversationUsers>
                    {
                        new ConversationUsers { UserId = _userId, CreatedOn = DateTimeOffset.Now },
                        new ConversationUsers { UserId = anotherUser, CreatedOn = DateTimeOffset.Now }
                    }
                };

            var isSaved = _chatAccessor.SaveConversation(conversation);

            if (isSaved)
            {
                Conversations.Add(_chatAccessor.GetConversation(conversation.Id));
                Conversations.OrderBy(x => x.ConversationUsers.SelectMany(y => y.UserMessages).OrderByDescending(z => z.CreatedOn).FirstOrDefault().CreatedOn);
                UserSearch = string.Empty;
                UserSearchResults = new List<string>();
                StateHasChanged();
            }   
        }
    }

    private void SearchForUser()
    {
        if (!string.IsNullOrWhiteSpace(UserSearch))
        {
            var existingUserConvos = Conversations.SelectMany(x => x.ConversationUsers).Select(x => x.User.UserName).Distinct().ToList();
            existingUserConvos.Add(_username);
            UserSearchResults = _userDbAccessor.SearchForUsers(UserSearch, existingUserConvos);
            StateHasChanged();
        }        
    }

    private void SendMessageOnKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (SelectedConversation == null || SelectedConversation.Id == 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Choose a conversation to send messages!");
            return;
        }
        else if (!string.IsNullOrEmpty(NewMessage))
        {
            var newMessage = new DisplayMessage()
                {
                    UserId = _userId,
                    Message = NewMessage,
                    CreatedOn = DateTimeOffset.Now,
                };

            _chatAccessor.SaveNewMessage(SelectedConversation, newMessage);
            NewMessage = null;

            _displayMessages.RefreshMe();
            Conversations = _chatAccessor.GetUserConversations(_userId);
            RefreshConversations = Conversations;
            StateHasChanged();
            //await HubConnection.SendAsync("SendUserMessage", UserId, messageInput);
        }
    }

    public async ValueTask DisposeAsync()
    {
    }
}



<style>

    @@media screen and (max-width: 767px) {

        .inbox_people {
            width: 100%!important;
        }

        .msgs {
            width: 0%!important;
        }

        .inbox_not_selected {
            width: 0%!important;
        }

        .msgs_selected {
            width: 100%!important;
        }

        .return_to_convo {
            visibility: inherit!important;
            float: right;
            width: 20%
        }

        .hidden_stuff {
            visibility: hidden!important;
            display:none!important;
        }
    }

    @@media screen and (min-width: 768px) {

        .return-to-convo {
            visibility: hidden!important;
            display: none!important;
        }
    }

    .float-parent-element {
        width: 100%;
        display: inline-block;
    }

    .float-child-element-right {
        float: right;
        width: 80%!important;
    }

    .float-child-element-left {
        float: left;
        width: 35px!important;
    }

    textarea {
        width: 85%;
    }

    .inbox_people {
        background: #f8f8f8 none repeat scroll 0 0;
        float: left;
        overflow: hidden;
        width: 40%;
        border-right: 1px solid #c4c4c4;
    }

    .msgs {
        float: left;
        padding: 30px 15px 0 25px;
        width: 60%;
        display: grid;
    }

    .container {
        max-width: 1170px;
        margin: auto;
    }

    img {
        max-width: 100%;
    }

    .inbox_msg {
        border: 1px solid #c4c4c4;
        clear: both;
        overflow: hidden;
    }

    .top_spac {
        margin: 20px 0 0;
    }


    .recent_heading {
        float: left;
        width: 40%;
        margin-bottom: 10px;
    }

    .srch_bar {
        display: inline-block;
        vertical-align: bottom;
        text-align: right;
        width: auto;
        float: right;
    }

    .headind_srch {
        padding: 10px 29px 10px 20px;
        overflow: auto;
        border-bottom: 1px solid #c4c4c4;
    }

    .recent_heading h4 {
        color: #05728f;
        font-size: 21px;
        margin: auto;
    }

    .srch_bar input {
        border: 1px solid #cdcdcd;
        border-width: 0 0 1px 0;
        width: 80%;
        padding: 2px 0 4px 6px;
        background: none;
    }

    .srch_bar .input-group-addon button {
        background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
        border: medium none;
        padding: 0;
        color: #707070;
        font-size: 18px;
    }

    .srch_bar .input-group-addon {
        margin: 0 0 0 -27px;
    }

    .chat_ib h5 {
        font-size: 15px;
        color: #464646;
        margin: 0 0 8px 0;
    }

        .chat_ib h5 span {
            font-size: 13px;
            float: right;
        }

    .chat_ib p {
        font-size: 14px;
        color: #989898;
        margin: auto
    }

    .chat_img {
        float: left;
        width: 11%;
    }

    .chat_ib {
        float: left;
        padding: 0 0 0 15px;
        width: 88%;
    }

    .chat_people {
        overflow: hidden;
        clear: both;
    }

    .chat_list {
        border-bottom: 1px solid #c4c4c4;
        margin: 0;
        padding: 18px 16px 10px;
    }

    .inbox_chat {
        height: 550px;
        overflow-y: scroll;
    }

    .active_chat {
        background: #ebebeb;
    }

    .incoming_msg_img {
        display: inline-block;
        width: 6%;
    }

    .received_msg {
        display: inline-block;
        padding: 0 0 0 10px;
        vertical-align: top;
        width: 92%;
    }

    .received_withd_msg p {
        background: #ebebeb none repeat scroll 0 0;
        border-radius: 3px;
        color: #646464;
        font-size: 14px;
        margin: 0;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .time_date {
        color: #747474;
        display: block;
        font-size: 12px;
        margin: 8px 0 0;
    }

    .received_withd_msg {
        width: 57%;
    }

    .sent_withd_msg p {
        background: #05728f none repeat scroll 0 0;
        border-radius: 3px;
        font-size: 14px;
        margin: 0;
        color: #fff;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .sent_msg p {
        display: inline-block;
        padding: 0 0 0 10px;
        vertical-align: top;
        width: 92%;
    }

    .outgoing_msg {
        margin: 26px 0 26px;
    }

    .sent_msg {
        float: right;
        width: 60%;
    }

    .input_msg_write input {
        background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
        border: medium none;
        color: #4c4c4c;
        font-size: 15px;
        min-height: 48px;
        width: 100%;
    }

    .type_msg {
        border-top: 1px solid #c4c4c4;
        position: relative;
    }

    .msg_send_btn {
        background: #05728f none repeat scroll 0 0;
        border: medium none;
        border-radius: 50%;
        color: #fff;
        cursor: pointer;
        font-size: 17px;
        height: 33px;
        position: absolute;
        right: 0;
        top: 5px;
        width: 33px;
        margin-right: 5px;
    }

    .messaging {
        padding: 0 0 50px 0;
    }

    .msg_history {
        display: flex;
        height: 480px;
        overflow-y: auto;
    }

    .write_msg {
        resize: none;
    }

    .center-stuff {
        justify-content: space-evenly;
        justify-items: center;
        align-content: space-evenly;
        align-items: center;
    }
</style>