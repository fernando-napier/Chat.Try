@page "/chat"
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Try.Models
@inject Chat.Try.Accessors.IUserDbAccessor _userDbAccessor
@inject Chat.Try.Accessors.IChatDbAccessor _chatAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using Microsoft.JSInterop
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>
        <div class="messaging">
            <div class="inbox_msg">
            <div class="inbox_people">
                <div class="headind_srch">
                <div class="recent_heading">
                    <h4>Recent</h4>
                </div>
                <div class="srch_bar">
                    <input type="text" class="search-bar" @bind-value="UserSearch" @bind-value:event="oninput" @onkeyup="SearchForUser" placeholder="Search for Users">
                    @if(UserSearchResults != null && UserSearchResults.Any())
                    {
                        <ul class="list-group" style="position: absolute; z-index: 100;">
                            @foreach(var userChosen in UserSearchResults)
                            {
                                <li class="list-group-item" @onclick="() => CreateUserConversation(userChosen)">@userChosen</li>
                            }
                        </ul>
                    }
                </div>
                </div>
                <div class="inbox_chat">
                    <ConversationPage Conversations=@Conversations UserId=@_userId @bind-SelectedConversation="SelectedConversation" />
                </div>
            </div>
                <div class="mesgs">
                    <div class="msg_history" @ref=MessageRef>
                        @if (SelectedConversation != null)
                        {
                           <DisplayMessages @ref=_displayMessages Conversation=@SelectedConversation UserId=@_userId />
                            ScrollToEndAsync();
                        }
                    </div>
                    <div class="type_msg">
                    <div class="input_msg_write">
                            <input type="text" class="write_msg" @onkeyup="SendMessageOnKeyPress" @bind=NewMessage placeholder="Type a message" />
                        <button class="msg_send_btn" type="button" @onclick="@(() => SendMessage())">=></button>
                    </div>
                </div>
            </div>
            </div>
        </div>
    </Authorized>

    <NotAuthorized>
        <h1>Hello, inauthentic user!</h1>
        <p>In order to interact with others Login or Register</p>
    </NotAuthorized>
 
</AuthorizeView>

@code{
    private List<string> UserSearchResults { get; set; }
    private List<Conversations> Conversations = new();
    private Conversations SelectedConversation { get; set; }
    private string _username;
    private string _userId;
    private string UserSearch { get; set; }
    private string ResultUserChosen;
    private string NewMessage;
    private bool isUserReadonly = false;
    private ClaimsPrincipal user = new ClaimsPrincipal();
    private DisplayMessages _displayMessages { get; set; }
    ElementReference MessageRef;
    private bool ScrollUpdatedFlag = false;
    private int ScrollCounter = 0;

    private async Task ScrollToEndAsync()
    {
        if (ScrollUpdatedFlag)
        {
            ScrollUpdatedFlag = false;
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("scrollToEnd", new object[] { MessageRef });
            if (ScrollCounter / 3 == 1)
            {
                ScrollUpdatedFlag = true;
                ScrollCounter = 0;
            }
            ScrollCounter++;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }

        _username = user.Identity.Name;
        _userId = _userDbAccessor.GetIdByUser(_username);

        Conversations = _chatAccessor.GetUserConversations(_userId);
        StateHasChanged();
    }

    private async Task CreateUserConversation(string userChosen)
    {
        if (!string.IsNullOrWhiteSpace(userChosen))
        {
            var anotherUser = _userDbAccessor.GetIdByUser(userChosen);
            if (string.IsNullOrWhiteSpace(anotherUser))
            {
                await JsRuntime.InvokeVoidAsync("alert", "user not found");
                return;
            }

            if (_chatAccessor.ConversationExists(_userId, anotherUser))
            {
                return;
            }

            var conversation = new Conversations()
                {
                    CreatedOn = DateTimeOffset.Now,
                    ConversationUsers = new List<ConversationUsers>
                    {
                        new ConversationUsers { UserId = _userId, CreatedOn = DateTimeOffset.Now },
                        new ConversationUsers { UserId = anotherUser, CreatedOn = DateTimeOffset.Now }
                    }
                };

            var isSaved = _chatAccessor.SaveConversation(conversation);

            if (isSaved)
            {
                Conversations.Add(_chatAccessor.GetConversation(conversation.Id));
                Conversations.OrderBy(x => x.ConversationUsers.SelectMany(y => y.UserMessages).OrderByDescending(z => z.CreatedOn).FirstOrDefault().CreatedOn);
                UserSearch = string.Empty;
                UserSearchResults = new List<string>();
                StateHasChanged();
            }   
        }
    }

    private void SearchForUser()
    {
        if (!string.IsNullOrWhiteSpace(UserSearch))
        {
            var existingUserConvos = Conversations.SelectMany(x => x.ConversationUsers).Select(x => x.User.UserName).Distinct().ToList();
            UserSearchResults = _userDbAccessor.SearchForUsers(UserSearch, existingUserConvos);
            StateHasChanged();
        }        
    }

    private void SendMessageOnKeyPress(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SendMessage();
        }
    }

    private void SendMessage()
    {
        if (!string.IsNullOrEmpty(NewMessage))
        {
            var newMessage = new DisplayMessage()
                {
                    UserId = _userId,
                    Message = NewMessage,
                    CreatedOn = DateTimeOffset.Now,
                };

            _chatAccessor.SaveNewMessage(SelectedConversation, newMessage);
            NewMessage = null;

            _displayMessages.RefreshMe();
            StateHasChanged();
            //await HubConnection.SendAsync("SendUserMessage", UserId, messageInput);
        }
    }

    public async ValueTask DisposeAsync()
    {
    }
}

<style>
    .container {
        max-width: 1170px;
        margin: auto;
    }

    img {
        max-width: 100%;
    }

    .inbox_people {
        background: #f8f8f8 none repeat scroll 0 0;
        float: left;
        overflow: hidden;
        width: 40%;
        border-right: 1px solid #c4c4c4;
    }

    .inbox_msg {
        border: 1px solid #c4c4c4;
        clear: both;
        overflow: hidden;
    }

    .top_spac {
        margin: 20px 0 0;
    }


    .recent_heading {
        float: left;
        width: 40%;
        margin-bottom: 10px;
    }

    .srch_bar {
        display: inline-block;
        vertical-align: bottom;
        text-align: right;
        width: auto;
        float: right;
    }

    .headind_srch {
        padding: 10px 29px 10px 20px;
        overflow: auto;
        border-bottom: 1px solid #c4c4c4;
    }

    .recent_heading h4 {
        color: #05728f;
        font-size: 21px;
        margin: auto;
    }

    .srch_bar input {
        border: 1px solid #cdcdcd;
        border-width: 0 0 1px 0;
        width: 80%;
        padding: 2px 0 4px 6px;
        background: none;
    }

    .srch_bar .input-group-addon button {
        background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
        border: medium none;
        padding: 0;
        color: #707070;
        font-size: 18px;
    }

    .srch_bar .input-group-addon {
        margin: 0 0 0 -27px;
    }

    .chat_ib h5 {
        font-size: 15px;
        color: #464646;
        margin: 0 0 8px 0;
    }

        .chat_ib h5 span {
            font-size: 13px;
            float: right;
        }

    .chat_ib p {
        font-size: 14px;
        color: #989898;
        margin: auto
    }

    .chat_img {
        float: left;
        width: 11%;
    }

    .chat_ib {
        float: left;
        padding: 0 0 0 15px;
        width: 88%;
    }

    .chat_people {
        overflow: hidden;
        clear: both;
    }

    .chat_list {
        border-bottom: 1px solid #c4c4c4;
        margin: 0;
        padding: 18px 16px 10px;
    }

    .inbox_chat {
        height: 550px;
        overflow-y: scroll;
    }

    .active_chat {
        background: #ebebeb;
    }

    .incoming_msg_img {
        display: inline-block;
        width: 6%;
    }

    .received_msg {
        display: inline-block;
        padding: 0 0 0 10px;
        vertical-align: top;
        width: 92%;
    }

    .received_withd_msg p {
        background: #ebebeb none repeat scroll 0 0;
        border-radius: 3px;
        color: #646464;
        font-size: 14px;
        margin: 0;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .time_date {
        color: #747474;
        display: block;
        font-size: 12px;
        margin: 8px 0 0;
    }

    .received_withd_msg {
        width: 57%;
    }

    .mesgs {
        float: left;
        padding: 30px 15px 0 25px;
        width: 60%;
    }

    .sent_msg p {
        background: #05728f none repeat scroll 0 0;
        border-radius: 3px;
        font-size: 14px;
        margin: 0;
        color: #fff;
        padding: 5px 10px 5px 12px;
        width: 100%;
    }

    .outgoing_msg {
        overflow: hidden;
        margin: 26px 0 26px;
    }

    .sent_msg {
        float: right;
        width: 46%;
    }

    .input_msg_write input {
        background: rgba(0, 0, 0, 0) none repeat scroll 0 0;
        border: medium none;
        color: #4c4c4c;
        font-size: 15px;
        min-height: 48px;
        width: 100%;
    }

    .type_msg {
        border-top: 1px solid #c4c4c4;
        position: relative;
    }

    .msg_send_btn {
        background: #05728f none repeat scroll 0 0;
        border: medium none;
        border-radius: 50%;
        color: #fff;
        cursor: pointer;
        font-size: 17px;
        height: 33px;
        position: absolute;
        right: 0;
        top: 11px;
        width: 33px;
    }

    .messaging {
        padding: 0 0 50px 0;
    }

    .msg_history {
        height: 516px;
        overflow-y: auto;
    }
</style>