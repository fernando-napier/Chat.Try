@page "/chat"
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Try.Models
@inject Chat.Try.Accessors.IUserDbAccessor _userDbAccessor
@inject Chat.Try.Accessors.IChatDbAccessor _chatAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<div class="container overflow-auto bg-white">
    <p>Search for new convos!</p>
    <div class="row">
        <div class="col-3">
            <input @bind="userSearch" type="text" class="form-control" placeholder="Find a friend" />
        </div>
        <div class="col-3">
            <button type="button" @onclick="SearchForUser" class="btn btn-primary">Send</button>
        </div>
    </div>
        
    <br />
    <div class="row justify-content-between">
        <div class="col-3">
            <ConversationPage Conversations=@Conversations UserId=@_userId @bind-SelectedConversation="SelectedConversation" />
        </div>
        
        @if (SelectedConversation != null)
        {
            <DisplayMessages Conversation=@SelectedConversation UserId=@_userId/>
        }
    </div>
    
</div>


@code{
    
    private List<Conversations> Conversations = new();
    private Conversations SelectedConversation { get; set; }
    private string _username;
    private string _userId;
    private string userSearch;
    private string messageInput;
    private bool isUserReadonly = false;
    private ClaimsPrincipal user = new ClaimsPrincipal();

    private DisplayMessages _displayMessages;

    

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }

        _username = user.Identity.Name;
        _userId = _userDbAccessor.GetIdByUser(_username);

        Conversations = _chatAccessor.GetUserConversations(_userId);
        StateHasChanged();
    }

    private async Task SearchForUser()
    {
        if (!string.IsNullOrWhiteSpace(userSearch))
        {
            var anotherUser = _userDbAccessor.GetIdByUser(userSearch);
            if (string.IsNullOrWhiteSpace(anotherUser))
            {
                await JsRuntime.InvokeVoidAsync("alert", "user not found");
                return;
            }

            if (_chatAccessor.ConversationExists(_userId, anotherUser))
            {
                return;
            }

            var conversation = new Conversations()
                {
                    CreatedOn = DateTimeOffset.Now,
                    ConversationUsers = new List<ConversationUsers>
                    {
                        new ConversationUsers { UserId = _userId, CreatedOn = DateTimeOffset.Now },
                        new ConversationUsers { UserId = anotherUser, CreatedOn = DateTimeOffset.Now }
                    }
                };

            var isSaved = _chatAccessor.SaveConversation(conversation);

            if (isSaved)
            {
                Conversations.Add(_chatAccessor.GetConversation(conversation.Id));
                StateHasChanged();
            }   
        }
    }

    public async ValueTask DisposeAsync()
    {
    }
}