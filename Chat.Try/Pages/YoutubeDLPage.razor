@page "/youtube"
@using System.Diagnostics;
@using System.Text;
@using Blazor.DownloadFileFast.Interfaces;
@using System.Text.RegularExpressions;
@using Chat.Try.Models;
@using YoutubeDLSharp;
@using YoutubeDLSharp.Options;
@inject IJSRuntime JsRuntime

<h2>YoutubeDL</h2>
<p>This is an experimental page where I allow users to download mp4s of youtube videos.</p>
<hr />

<div class="row">
    <div class="col-12 col-md-9" style="margin-bottom: 5px;">
        <input disabled=@IsDownloadActive @bind=Url type="text" style="width: 100%;" placeholder="https://www.youtube.com/">  
    </div>
    <div class="col-2 col-md-3">
        <button disabled=@IsDownloadActive @onclick="DownloadVideo">Download</button>
    </div>
    <div class="col-5 offset-5 offset-md-0">
        <input disabled=@IsDownloadActive id="checkbox" type="checkbox" @bind="mp3Flag" />
        <label for="checkbox">Audio Only?</label>
    </div>
</div>

<br />
@if (DownloadProgress.Any())
{
    <div class="yt-float-parent-element  progress-update">
        @for (int i = DownloadProgress.Count - 1; i >= 0; i--)
        {
            <p>@DownloadProgress.ElementAt(i)</p>
        }
    </div>
}
@if (DownloadComplete)
{
    <div class="yt-float-parent-element progress-complete">
        <p>Processing is complete! Now downloading to your browser. </p>
    </div>
}

<style>

    .progress-complete {
        margin-top: 20px;
    }

    .progress-update {
        margin-top: 20px;
        height: 300px;
        overflow: auto;
        display: flex!important;
        flex-direction: column-reverse;
    }
    .yt-float-parent-element {
        width: 80%;
        display: inline-block;
    }

    .yt-float-child-element-left  {
        float: left;
        width: 70%;
    }

    .yt-float-child-element-right {
        float: right;
        width: 100px;
    }
    
</style>

@code {
    [Inject]
    public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    [Inject]
    public Configuration Config { get; set; }

    private bool mp3Flag { get; set; }
    private bool DownloadComplete = false;
    private bool IsDownloadActive = false;
    private string Url { get; set; }
    private List<string> DownloadProgress = new List<string>();
    private Regex regex = new Regex(@"^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube(-nocookie)?\.com|youtu.be))(\/(?:[\w\-]+\?v=|embed\/|v\/)?)([\w\-]+)(\S+)?$", RegexOptions.Compiled);

    private async Task DownloadVideo()
    {

        IsDownloadActive = true;
        DownloadComplete = false;
        DownloadProgress = new List<string>();
        StateHasChanged();
        var filename = mp3Flag ? $"{Guid.NewGuid()}.mp3" : $"{Guid.NewGuid()}.mp4";


        if (string.IsNullOrEmpty(Url) || !regex.IsMatch(Url))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Not a valid youtube url!");
            IsDownloadActive = false;
            StateHasChanged();
            return;
        }

        DownloadProgress.Add("Setting up process...");
        StateHasChanged();

        try
        {
            var ytdlProc = new YoutubeDLProcess();
            ytdlProc.PythonPath = Config.PythonPath;
            ytdlProc.ExecutablePath = Config.YoutubeDLPath;
            // capture the standard output and error output
            ytdlProc.OutputReceived += async (o, e) =>
            {
                if (!String.IsNullOrEmpty(e.Data))
                {
                    var data = e.Data.Replace("[download]", "[Processing]");
                    DownloadProgress.Add(data);
                }
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };
            ytdlProc.ErrorReceived += async (o, e) => 
            {
                if (!String.IsNullOrEmpty(e.Data))
                {
                    var data = e.Data.Replace("[download]", "[Processing]");
                    DownloadProgress.Add($"ERROR: {data}");
                }
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };
            var options = new OptionSet()
                {
                    Output = filename,
                    MaxFilesize = "10.0m",
                };

            if (mp3Flag)
            {
                options.ExtractAudio = mp3Flag;
                options.AudioFormat = AudioConversionFormat.Mp3;
            }
            
            // start running
            string[] urls = new[] { Url };
            await ytdlProc.RunAsync(urls, options);

            await BlazorDownloadFileService.DownloadFileAsync(mp3Flag ? "download.mp3" : "download.mp4", File.ReadAllBytes(filename));
            File.Delete(filename);
            DownloadComplete = true;
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Youtube download failed, try again. {ex.Message}");
            DownloadProgress.Add(ex.Message);
            File.Delete(filename);
        }

        IsDownloadActive = false;
        StateHasChanged();
    }
}