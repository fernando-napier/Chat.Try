@page "/counter"
@using Chat.Try.Db.Models
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Chat.Try.Db.Context.ChatContext _context
@inject Chat.Try.Accessors.IUserDbAccessor _userDbAccessor
@inject NavigationManager _navigation
@inject IJSRuntime JsRuntime

<PageTitle>Counter</PageTitle>

<h2>Counter</h2>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCountAsync">Click me</button>

<AuthorizeView>
    <Authorized>
        <hr />
        <h2>Leaderboard</h2>
        <table class="table" title="Counter Leaderboard">
            <thead>
            <tr>
              <th scope="col">#</th>
              <th scope="col">User</th>
              <th scope="col">Count</th>
            </tr>
          </thead>
      <tbody>
        <tr>
          <th scope="row">1</th>
          <td>Mark</td>
          <td>Otto</td>
          <td>mdo</td>
        </tr>
        <tr>
          <th scope="row">2</th>
          <td>Jacob</td>
          <td>Thornton</td>
          <td>fat</td>
        </tr>
        <tr>
          <th scope="row">3</th>
          <td>Larry</td>
          <td>the Bird</td>
          <td>twitter</td>
        </tr>
      </tbody>
      </table>
    </Authorized>
    <NotAuthorized>
        <p>You can click the counter button however your count will only be saved if you login or register</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int currentCount = 0;
    private Db.Models.Counter counter = new Db.Models.Counter();
    private ClaimsPrincipal user = new ClaimsPrincipal();
    private string userId = "";

    protected override async Task OnInitializedAsync()
    {
        await InitializeCounterAsync();
    }

    private async Task InitializeCounterAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }

        userId = _userDbAccessor.GetIdByUser(user.Identity.Name);        

        var existingCounter = _context.Counter.FirstOrDefault(x => x.UserId == userId);
        if (existingCounter == null)
        {
            var newCounter = new Db.Models.Counter
                {
                    UserId = userId,
                };
            _context.Counter.Add(newCounter);
            await _context.SaveChangesAsync();
            counter = newCounter;
        }
        else 
        {
            counter = existingCounter;
            currentCount = existingCounter.Count;
        }
    }

    private async Task IncrementCountAsync()
    {
        try
        {
            currentCount++;
            if (!user.Identity.IsAuthenticated)
            {
                return;
            }
            counter.Count = currentCount;
            _context.Counter.Update(counter);
            await _context.SaveChangesAsync();
        }
        catch
        {
            base.StateHasChanged();
        }
        base.StateHasChanged();
    }
}
