@inherits ChatPage;
@inject Chat.Try.Accessors.IChatDbAccessor _chatAccessor

<div class="card">
    <ul class="list-group list-group-flush">
        <li class="list-group-item disabled">Existing Convos</li>
        @foreach(var conversation in Conversations)
        {
            @foreach (var convoUser in conversation.ConversationUsers)
            {
                @if (convoUser.UserId != UserId)
                {
                    var recentMessage = conversation.ConversationUsers.SelectMany(x => x.UserMessages).OrderByDescending(x => x.CreatedOn).FirstOrDefault();
                    var sentOrReceived = recentMessage == null ? "None" : null;
                    if (sentOrReceived == null)
                    {
                        sentOrReceived = recentMessage.ConversationUser.UserId == UserId ? "Sent" : "Received";
                    }
                    <div class="chat_list @SelectConversation(conversation)" @onclick="() => SetSelect(conversation)">
                        <div class="chat_people">
                            <div class="chat_img"> <img src="https://ptetutorials.com/images/user-profile.png" alt="sunil"> </div>
                            <div class="chat_ib">
                                <h5>@convoUser.User.UserName<span class="chat_date">@(recentMessage?.CreatedOn.ToString("MM/dd/yy HH:mm") ?? "")</span></h5>
                                <p>
                                    @(recentMessage?.Message ?? "No messages yet")
                                </p>
                                <small>@sentOrReceived</small>
                                
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </ul>
</div>

<style>
    small {
        font-size: 10px;
    }
</style>

@code {
    [Parameter]
    public List<Conversations> Conversations { get; set; }

    [Parameter]
    public EventCallback<Conversations> SelectedConversationChanged { get; set; }

    [Parameter]
    public EventCallback<List<Conversations>> RefreshConversationsChanged { get; set; }

    [Parameter]
    public List<Conversations> RefreshConversations { get; set; }

    [Parameter]
    public Conversations SelectedConversation { get; set; }

    [Parameter]
    public string UserId { get; set; }

    public ValueTask DisposeAsync()
    {
        return ValueTask.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        var timer = new System.Threading.Timer((_) =>
        {
            InvokeAsync(async () =>
            {
                // Update the UI
                var refreshConversationsFlag = RefreshConvos();

                if (refreshConversationsFlag)
                {
                    StateHasChanged();
                }
            });
        }, null, 0, 15000);
    }

    private bool RefreshConvos()
    {
        var refreshConversations = _chatAccessor.RefreshConversations(UserId);
        var refreshConversationsFlag = false;

        foreach (var conversation in refreshConversations)
        {
            var existingConvo = Conversations.FirstOrDefault(x => x.Id == conversation.Id);
            if (existingConvo == null ||
                existingConvo.ConversationUsers.SelectMany(x => x.UserMessages).Count()
                != conversation.ConversationUsers.SelectMany(x => x.UserMessages).Count())
            {
                refreshConversationsFlag = true;
            }
        }
        if (refreshConversationsFlag)
        {
            Conversations = refreshConversations;
            RefreshConversations = refreshConversations;
        }
        return refreshConversationsFlag;
    }

    private string SelectConversation(Conversations conversation) =>
        IsSelected(conversation) ? "bg-info text-white" : "bg-light";


    bool IsSelected(Conversations conversation)
    {
        if (SelectedConversation == null)
        {
            SelectedConversation = new Conversations();
        }

        return SelectedConversation.Id == conversation.Id;
    }


    void SetSelect(Conversations conversation)
    {
        RefreshConvos();
        if (IsSelected(conversation))
        {
            SelectedConversationChanged.InvokeAsync(SelectedConversation);
            RefreshConversationsChanged.InvokeAsync(RefreshConversations);
        }
        else
        {
            SelectedConversation = conversation;
            SelectedConversationChanged.InvokeAsync(SelectedConversation);
            RefreshConversationsChanged.InvokeAsync(RefreshConversations);
            StateHasChanged();
        }
    }
}
